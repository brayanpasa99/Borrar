% Punto 1
% Probar c√≥digos
declare MultA
fun{MultA Xs A}
   fun{Mult1 Xs A}
      case Xs of X|Xr then
	 {Mult1 Xr A*X}
      [] nil then A
      end
   end
in{Mult1 Xs A}
end

{Browse {MultA [11 22 33 44] 1}}

declare MultB
fun{MultB Xs}
   fun{Mult1 Xs}
      case Xs of X|Xr then A:=@A*X
	 {Mult1 Xr}
      [] nil then @A
      end
   end
   A={NewCell 10} in {Mult1 Xs}
end

{Browse {MultB [11 22 33 44]}}

% Punto 2 y 3
% Triangulo Pascal
declare  ShifLeft ShifRight 

fun {ShiftLeft L}
   case L of H|T then
      H|{ShiftLeft T}
   else [0.0]
   end
end

fun {ShiftRight L}  0.0|L end

%Programacion de alto orden

fun {GenericPascal Op N}
   if N==1.0 then [1.0]
   else L in L = {GenericPascal Op N-1.0}
      {OpList  Op {ShiftLeft L} {ShiftRight L}}
   end
end
fun {OpList Op L1 L2} 
	case L1 of H1|T1 then
		case L2 of H2|T2 then
	 	      {Op H1 H2}|{OpList Op T1 T2}
		end
      	else nil end
end

declare Resta
fun {Resta N1 N2} (N1+1.0)/(N2+1.0) end
declare

fun {RestaPascal N} 
	{GenericPascal Resta N} 
end

{Browse {RestaPascal 1.0}}
{Browse {RestaPascal 2.0}}
{Browse {RestaPascal 3.0}}
{Browse {RestaPascal 4.0}}
{Browse {RestaPascal 5.0}}

% Punto 4
declare Ints
fun lazy {Ints N}
   N|{Ints N+1}
end

fun {SumaLista L}
   case L of X | L1 then X + {SumaLista L1}
   else 0 end
end

declare C
C={Ints 17}
{Browse [C.1 C.2.1 C.2.2.1]}
{Browse C.2.1}
{Browse C.2.2.1}
{Browse {Ints 17}}

{Browse {SumaLista {Ints 2}}}
